// Code generated by MockGen. DO NOT EDIT.
// Source: uphold_api.go
//
// Generated by this command:
//
//	mockgen -source=uphold_api.go -destination=../mocks/mock_api/mock_api.go
//

// Package mock_api is a generated GoMock package.
package mock_api

import (
	http "net/http"
	reflect "reflect"
	models "uphold-alert-bot/internal/models"

	gomock "go.uber.org/mock/gomock"
)

// MockApiResponseInterface is a mock of ApiResponseInterface interface.
type MockApiResponseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockApiResponseInterfaceMockRecorder
	isgomock struct{}
}

// MockApiResponseInterfaceMockRecorder is the mock recorder for MockApiResponseInterface.
type MockApiResponseInterfaceMockRecorder struct {
	mock *MockApiResponseInterface
}

// NewMockApiResponseInterface creates a new mock instance.
func NewMockApiResponseInterface(ctrl *gomock.Controller) *MockApiResponseInterface {
	mock := &MockApiResponseInterface{ctrl: ctrl}
	mock.recorder = &MockApiResponseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiResponseInterface) EXPECT() *MockApiResponseInterfaceMockRecorder {
	return m.recorder
}

// FetchPairData mocks base method.
func (m *MockApiResponseInterface) FetchPairData(ticker *models.Ticker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPairData", ticker)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchPairData indicates an expected call of FetchPairData.
func (mr *MockApiResponseInterfaceMockRecorder) FetchPairData(ticker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPairData", reflect.TypeOf((*MockApiResponseInterface)(nil).FetchPairData), ticker)
}

// ParseAPIData mocks base method.
func (m *MockApiResponseInterface) ParseAPIData(response *http.Response, ticker *models.Ticker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAPIData", response, ticker)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParseAPIData indicates an expected call of ParseAPIData.
func (mr *MockApiResponseInterfaceMockRecorder) ParseAPIData(response, ticker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAPIData", reflect.TypeOf((*MockApiResponseInterface)(nil).ParseAPIData), response, ticker)
}

// MockApiTestInterface is a mock of ApiTestInterface interface.
type MockApiTestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockApiTestInterfaceMockRecorder
	isgomock struct{}
}

// MockApiTestInterfaceMockRecorder is the mock recorder for MockApiTestInterface.
type MockApiTestInterfaceMockRecorder struct {
	mock *MockApiTestInterface
}

// NewMockApiTestInterface creates a new mock instance.
func NewMockApiTestInterface(ctrl *gomock.Controller) *MockApiTestInterface {
	mock := &MockApiTestInterface{ctrl: ctrl}
	mock.recorder = &MockApiTestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiTestInterface) EXPECT() *MockApiTestInterfaceMockRecorder {
	return m.recorder
}

// IsPairValid mocks base method.
func (m *MockApiTestInterface) IsPairValid(pair string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPairValid", pair)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPairValid indicates an expected call of IsPairValid.
func (mr *MockApiTestInterfaceMockRecorder) IsPairValid(pair any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPairValid", reflect.TypeOf((*MockApiTestInterface)(nil).IsPairValid), pair)
}
