// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler.go
//
// Generated by this command:
//
//	mockgen -source=scheduler.go -destination=../mocks/mock_scheduler/mock_scheduler.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"
	time "time"
	models "uphold-alert-bot/internal/models"

	gomock "go.uber.org/mock/gomock"
)

// MockDataRetriever is a mock of DataRetriever interface.
type MockDataRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockDataRetrieverMockRecorder
	isgomock struct{}
}

// MockDataRetrieverMockRecorder is the mock recorder for MockDataRetriever.
type MockDataRetrieverMockRecorder struct {
	mock *MockDataRetriever
}

// NewMockDataRetriever creates a new mock instance.
func NewMockDataRetriever(ctrl *gomock.Controller) *MockDataRetriever {
	mock := &MockDataRetriever{ctrl: ctrl}
	mock.recorder = &MockDataRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataRetriever) EXPECT() *MockDataRetrieverMockRecorder {
	return m.recorder
}

// FetchPairData mocks base method.
func (m *MockDataRetriever) FetchPairData(arg0 context.Context, arg1 *models.Ticker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPairData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchPairData indicates an expected call of FetchPairData.
func (mr *MockDataRetrieverMockRecorder) FetchPairData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPairData", reflect.TypeOf((*MockDataRetriever)(nil).FetchPairData), arg0, arg1)
}

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
	isgomock struct{}
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockPublisher) Publish(arg0 time.Time, arg1 *models.Ticker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", arg0, arg1)
}

// Publish indicates an expected call of Publish.
func (mr *MockPublisherMockRecorder) Publish(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublisher)(nil).Publish), arg0, arg1)
}

// MockRecorder is a mock of Recorder interface.
type MockRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockRecorderMockRecorder
	isgomock struct{}
}

// MockRecorderMockRecorder is the mock recorder for MockRecorder.
type MockRecorderMockRecorder struct {
	mock *MockRecorder
}

// NewMockRecorder creates a new mock instance.
func NewMockRecorder(ctrl *gomock.Controller) *MockRecorder {
	mock := &MockRecorder{ctrl: ctrl}
	mock.recorder = &MockRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecorder) EXPECT() *MockRecorderMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockRecorder) Save(arg0 context.Context, arg1 time.Time, arg2 *models.Ticker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRecorderMockRecorder) Save(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRecorder)(nil).Save), arg0, arg1, arg2)
}
