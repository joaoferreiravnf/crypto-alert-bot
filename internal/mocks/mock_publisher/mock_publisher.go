// Code generated by MockGen. DO NOT EDIT.
// Source: logger.go
//
// Generated by this command:
//
//	mockgen -source=logger.go -destination=../mocks/mock_publisher/mock_publisher.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"
	time "time"
	models "uphold-alert-bot/internal/models"

	gomock "go.uber.org/mock/gomock"
)

// MockPublisherInterface is a mock of PublisherInterface interface.
type MockPublisherInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherInterfaceMockRecorder
	isgomock struct{}
}

// MockPublisherInterfaceMockRecorder is the mock recorder for MockPublisherInterface.
type MockPublisherInterfaceMockRecorder struct {
	mock *MockPublisherInterface
}

// NewMockPublisherInterface creates a new mock instance.
func NewMockPublisherInterface(ctrl *gomock.Controller) *MockPublisherInterface {
	mock := &MockPublisherInterface{ctrl: ctrl}
	mock.recorder = &MockPublisherInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisherInterface) EXPECT() *MockPublisherInterfaceMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockPublisherInterface) Publish(arg0 time.Time, arg1 *models.Ticker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", arg0, arg1)
}

// Publish indicates an expected call of Publish.
func (mr *MockPublisherInterfaceMockRecorder) Publish(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublisherInterface)(nil).Publish), arg0, arg1)
}
