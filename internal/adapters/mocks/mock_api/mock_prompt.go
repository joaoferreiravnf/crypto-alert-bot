// Code generated by MockGen. DO NOT EDIT.
// Source: prompt.go
//
// Generated by this command:
//
//	mockgen -source=prompt.go -destination=../mocks/mock_api/mock_prompt.go
//

// Package mock_prompt is a generated GoMock package.
package mock_prompt

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockApiDataValidator is a mock of ApiDataValidator interface.
type MockApiDataValidator struct {
	ctrl     *gomock.Controller
	recorder *MockApiDataValidatorMockRecorder
	isgomock struct{}
}

// MockApiDataValidatorMockRecorder is the mock recorder for MockApiDataValidator.
type MockApiDataValidatorMockRecorder struct {
	mock *MockApiDataValidator
}

// NewMockApiDataValidator creates a new mock instance.
func NewMockApiDataValidator(ctrl *gomock.Controller) *MockApiDataValidator {
	mock := &MockApiDataValidator{ctrl: ctrl}
	mock.recorder = &MockApiDataValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDataValidator) EXPECT() *MockApiDataValidatorMockRecorder {
	return m.recorder
}

// IsPairValid mocks base method.
func (m *MockApiDataValidator) IsPairValid(pair string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPairValid", pair)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPairValid indicates an expected call of IsPairValid.
func (mr *MockApiDataValidatorMockRecorder) IsPairValid(pair any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPairValid", reflect.TypeOf((*MockApiDataValidator)(nil).IsPairValid), pair)
}
